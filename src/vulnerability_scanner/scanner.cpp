#include <fstream>
#include <sstream>
#include <iostream>

VulnerabilityScanner::VulnerabilityScanner(const std::string& databasePath) {
    loadVulnerabilityDatabase(databasePath);
}

void VulnerabilityScanner::loadVulnerabilityDatabase(const std::string& databasePath) {
    std::ifstream file(databasePath);
    if (!file) {
        std::cerr << "Unable to open database file: " << databasePath << std::endl;
        return;
    }

    std::string line;
    while (std::getline(file, line)) {
        vulnerabilities.push_back(line);
    }
}

void VulnerabilityScanner::scanSystem() {
    std::vector<std::string> results = checkForVulnerabilities();
    findings.insert(findings.end(), results.begin(), results.end());
}

std::vector<std::string> VulnerabilityScanner::checkForVulnerabilities() {
    std::vector<std::string> results;

    // Example: Check system version against known vulnerabilities
    std::string systemVersion = getSystemVersion();
    for (const auto& vulnerability : vulnerabilities) {
        if (systemVersion.find(vulnerability) != std::string::npos) {
            results.push_back("Vulnerability found: " + vulnerability);
        }
    }

    return results;
}

void VulnerabilityScanner::reportFindings() const {
    if (findings.empty()) {
        std::cout << "No vulnerabilities found." << std::endl;
    } else {
        for (const auto& finding : findings) {
            std::cout << finding << std::endl;
        }
    }
}